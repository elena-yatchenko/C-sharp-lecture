//Двумерные массивы

// Первое и главное — как задаются двумерные массивы. По аналогии с одномерными массивами мы
// указываем тип данных (например, string), в квадратных скобках ставим запятую как показатель того,
// что у нас будет две размерности: первая — строки, вторая — столбцы. Потом даём массиву название
// (например, table). После этого пишем new string и указываем, какое количество строчек и столбцов
// нам нужно. 

// string[,] table = new string[2,3]

// В первом примере задан массив строк (можно сказать, что это таблица из строк). Но можно задать и
// прямоугольную таблицу чисел, которую в математике обычно называют матрицей. В квадратных
// скобках также первым числом мы обозначаем количество строк, которые будут в нашем двумерном
// массиве, а вторым числом указываем количество столбцов. 

// Int[,] matrix = new int[5,8]

//  Создание матрицы

// Для строк инициализация происходит через константу Empty.

string[,] table = new string[2, 5];
// String.Empty
// table [0,0] table [0,1] table [0,2] table [0,4]
// table [1,0] table [1,1] table [1,2] table [1,4]
table[1, 2] = "слово";

// Давайте теперь, используя циклы (а здесь нам потребуется цикл в цикле), распечатаем данный массив.
// Укажем счётчик rows, количество строк не больше 2. Дальше будет внутренний (вложенный) цикл,
// который обозначает количество столбцов (у нас их 5). Здесь мы уже можем сделать распечатывание
// элементов массива. Давайте, как и ранее, воспользуемся интерполяцией (находим элемент по имеющимся данным). 
// Обращаемся к элементам массива через имя массива. Дальше индекс строки и индекс столбца.

// for (int rows = 0; rows < 2; rows++)
// {
//  for (int columns = 0; columns < 5; columns++)
//  {
//  Console.WriteLine($"{table[rows, columns]}");
//  }
// }

// Чтобы убедиться, что у нас действительно вывелись 10 элементов, сделаем обрамление в виде
// минусов или дефисов (кому как больше нравится) и убедимся, что у нас действительно выводятся
// строки. 

for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine($"-{table[rows, columns]}-");
    }
}

// Теперь давайте попробуем сделать примерно то же с числами. Определим двумерный массив, назовём
// его matrix и укажем для него, например, 3 строки и 4 столбца. Затем поступим аналогично, используя
// циклы. Вместо rows можно написать i (внешний цикл, щёлкающий строки), вместо columns — j
// (внутренний цикл, щёлкающий столбцы). Выводим на экран. Там, где в прошлом примере был дефис
// (минус), поставим пробел. 

// Имя массива.GetLength(0) возвращает количество строк в вашем массиве. 
// Имя массива.GetLength(1) - количество столбцов. 

// через методы создаем и заполняем случайными данными

void PrintArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();
    }
}
int[,] matrix = new int[3, 4];
PrintArray(matrix);

// Заполнение матрицы случайными числами

void FillArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i, j] = new Random().Next(1, 10);//[1; 10)
        }
    }
}
int[,] matrix = new int[3, 4];
PrintArray(matrix);
FillArray(matrix);
Console.WriteLine();
PrintArray(matrix);

